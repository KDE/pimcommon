# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: none
cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
set(PIM_VERSION "6.4.80")

project(pimcommon VERSION ${PIM_VERSION})

set(KF_MIN_VERSION "6.14.0")
set(QT_REQUIRED_VERSION "6.8.0")
set(CMAKE_CXX_STANDARD 20)
find_package(ECM ${KF_MIN_VERSION} CONFIG REQUIRED)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)

include(ECMGenerateExportHeader)
include(ECMSetupVersion)
include(ECMGenerateHeaders)

file(
    GLOB_RECURSE ALL_CLANG_FORMAT_SOURCE_FILES
    src/*.cpp
    src/*.h
)
set(PRE_COMMIT_INSTALLED FALSE)
if(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    if(EXISTS "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit")
        file(READ "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit" FILE_CONTENTS)
        string(FIND "${FILE_CONTENTS}" "File generated by pre-commit" INDEX)
        if(${INDEX} GREATER_EQUAL 0)
            set(PRE_COMMIT_INSTALLED TRUE)
        endif()
    endif()
endif()
if(NOT ${PRE_COMMIT_INSTALLED})
    include(KDEGitCommitHooks)
    include(KDEClangFormat)
    kde_clang_format(${ALL_CLANG_FORMAT_SOURCE_FILES})
endif()

include(ECMQtDeclareLoggingCategory)
include(ECMDeprecationSettings)
include(ECMFeatureSummary)
include(ECMAddTests)
include(ECMInstallIcons)
include(ECMAddQtDesignerPlugin)
include(ECMAddQch)
include(ECMCheckOutboundLicense)

option(BUILD_QCH "Build API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)" OFF)
add_feature_info(
    QCH
    ${BUILD_QCH}
    "API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)"
)

set(PIMCOMMON_LIB_VERSION ${PIM_VERSION})
set(LIBKDEPIM_LIB_VERSION "6.4.40")
set(KTEXTADDONS_MIN_VERSION "1.6.0")
set(KIMAP_LIB_VERSION "6.4.40")
set(KLDAP_LIB_VERSION "6.4.40")

set(AKONADICONTACT_LIB_VERSION "6.4.40")
set(AKONADI_VERSION "6.4.40")
set(AKONADI_SEARCH_VERSION "6.4.40")

find_package(
    Qt6
    ${QT_REQUIRED_VERSION}
    CONFIG
    REQUIRED
        Widgets
        DBus
        Network
        Xml
)

find_package(KF6Archive ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Codecs ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Config ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Contacts ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6CoreAddons ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6I18n ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6ItemModels ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6JobWidgets ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6KCMUtils ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6KIO ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6NewStuff ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Purpose ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Service ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6WidgetsAddons ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6XmlGui ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6WidgetsAddons ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6ColorScheme ${KF_MIN_VERSION} CONFIG REQUIRED)

find_package(KPim6Akonadi ${AKONADI_VERSION} CONFIG REQUIRED)
find_package(KPim6AkonadiContactWidgets ${AKONADICONTACT_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6IMAP ${KIMAP_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6LdapWidgets ${KLDAP_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6Libkdepim ${LIBKDEPIM_LIB_VERSION} CONFIG REQUIRED)

option(USE_UNITY_CMAKE_SUPPORT "Use UNITY cmake support (speedup compile time)" OFF)

set(COMPILE_WITH_UNITY_CMAKE_SUPPORT OFF)
if(USE_UNITY_CMAKE_SUPPORT)
    set(COMPILE_WITH_UNITY_CMAKE_SUPPORT ON)
endif()

option(BUILD_DESIGNERPLUGIN "Build plugin for Qt Designer" ON)
add_feature_info(
    DESIGNERPLUGIN
    ${BUILD_DESIGNERPLUGIN}
    "Build plugin for Qt Designer"
)

option(
    FORCE_DISABLE_AKONADI_SEARCH
    "Disable features and API that require akonadi-search, e.g. because xapian isn't available"
    OFF
)
if(UNIX)
    if(NOT FORCE_DISABLE_AKONADI_SEARCH)
        find_package(KPim6AkonadiSearch ${AKONADI_SEARCH_VERSION} CONFIG REQUIRED)
        set_package_properties(
            KPim6AkonadiSearch
            PROPERTIES
                DESCRIPTION
                    "The Akonadi Search libraries"
                URL
                    "https://invent.kde.org/pim/akonadi-search"
                TYPE
                    REQUIRED
                PURPOSE
                    "Provides search capabilities in KMail and Akonadi"
        )
    endif()
else()
    if(NOT FORCE_DISABLE_AKONADI_SEARCH)
        find_package(KPim6AkonadiSearch ${AKONADI_SEARCH_VERSION} CONFIG)
        set_package_properties(
            KPim6AkonadiSearch
            PROPERTIES
                DESCRIPTION
                    "The Akonadi Search libraries"
                URL
                    "https://invent.kde.org/pim/akonadi-search"
                TYPE
                    OPTIONAL
                PURPOSE
                    "Provides search capabilities in KMail and Akonadi"
        )
    endif()
endif()

if(NOT KPim6AkonadiSearch_FOUND)
    set(FORCE_DISABLE_AKONADI_SEARCH TRUE)
endif()

set(DISABLE_AKONADI_SEARCH ${FORCE_DISABLE_AKONADI_SEARCH})
configure_file(config-akonadi-search.h.in ${CMAKE_CURRENT_BINARY_DIR}/src/config-akonadi-search.h)

option(
    ENABLE_WARN_OUTDATED
    "Warn users if using an old version; if you long term supported distribution, you might want to set this to off"
    ON
)

if(BUILD_TESTING)
    add_definitions(-DBUILD_TESTING)
    find_package(Qt6 ${QT_REQUIRED_VERSION} CONFIG REQUIRED Test)
endif()

########### Targets ###########

add_definitions(-DQT_NO_CONTEXTLESS_CONNECT)
ecm_set_disabled_deprecation_versions(QT 6.10.0 KF 6.16.0)

find_package(KF6TextAutoCorrectionWidgets ${KTEXTADDONS_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6TextAddonsWidgets ${KTEXTADDONS_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6TextCustomEditor ${KTEXTADDONS_MIN_VERSION} CONFIG REQUIRED)

option(OPTION_USE_PLASMA_ACTIVITIES "Activate plasma activities" ON)
if(OPTION_USE_PLASMA_ACTIVITIES)
    if(NOT WIN32 AND NOT APPLE)
        set(OPTION_USE_PLASMA_ACTIVITIES true)
    else()
        set(OPTION_USE_PLASMA_ACTIVITIES false)
    endif()
endif()
if(OPTION_USE_PLASMA_ACTIVITIES)
    if(NOT WIN32 AND NOT APPLE)
        set(PLASMAACTIVITIES_MIN_VERSION "6.1.0")
        find_package(PlasmaActivities ${PLASMAACTIVITIES_MIN_VERSION})
        set_package_properties(
            PlasmaActivities
            PROPERTIES
                DESCRIPTION
                    "Allow to compile with plasma activities"
                TYPE
                    OPTIONAL
        )
    endif()
endif()

add_subdirectory(src)
ecm_qt_install_logging_categories(
        EXPORT PIMCOMMON
        FILE pimcommon.categories
        DESTINATION ${KDE_INSTALL_LOGGINGCATEGORIESDIR}
)
if(DEFINED kde_configure_git_pre_commit_hook)
    kde_configure_git_pre_commit_hook(CHECKS CLANG_FORMAT)
endif()
ki18n_install(po)
ecm_feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
file(
    GLOB_RECURSE ALL_SOURCE_FILES
    src/*.cpp
    src/*.h
)
ecm_check_outbound_license(LICENSES GPL-2.0-only  FILES ${ALL_SOURCE_FILES})
